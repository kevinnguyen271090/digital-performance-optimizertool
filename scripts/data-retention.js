const { createClient } = require('@supabase/supabase-js');
require('dotenv').config({ path: '.env' });

const supabaseUrl = process.env.VITE_SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå Thi·∫øu VITE_SUPABASE_URL ho·∫∑c SUPABASE_SERVICE_ROLE_KEY');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

// C·∫•u h√¨nh retention policy
const RETENTION_POLICY = {
  'google': {
    'ga4': { raw: 90, aggregated: 730 }, // 90 ng√†y raw, 2 nƒÉm aggregated
    'ads': { raw: 60, aggregated: 365 }, // 60 ng√†y raw, 1 nƒÉm aggregated
    'search-console': { raw: 90, aggregated: 730 },
    'merchant-center': { raw: 60, aggregated: 365 },
    'sheets': { raw: 30, aggregated: 365 }
  },
  'meta': {
    'ads': { raw: 60, aggregated: 365 }
  },
  'tiktok': {
    'ads': { raw: 60, aggregated: 365 }
  },
  'woocommerce': {
    'store': { raw: 90, aggregated: 730 }
  }
};

// H√†m x√≥a d·ªØ li·ªáu c≈©
async function cleanupOldData() {
  console.log('üßπ B·∫Øt ƒë·∫ßu d·ªçn d·∫πp d·ªØ li·ªáu c≈©...');
  
  try {
    // X√≥a d·ªØ li·ªáu raw c≈© h∆°n 90 ng√†y
    const { data: deletedRaw, error: rawError } = await supabase
      .from('analytics_data')
      .delete()
      .lt('created_at', new Date(Date.now() - 90 * 24 * 60 * 60 * 1000).toISOString());

    if (rawError) {
      console.error('‚ùå L·ªói x√≥a d·ªØ li·ªáu raw:', rawError);
    } else {
      console.log(`‚úÖ ƒê√£ x√≥a ${deletedRaw?.length || 0} b·∫£n ghi raw c≈©`);
    }

    // X√≥a audit logs c≈© h∆°n 1 nƒÉm
    const { data: deletedAudit, error: auditError } = await supabase
      .from('audit_logs')
      .delete()
      .lt('created_at', new Date(Date.now() - 365 * 24 * 60 * 60 * 1000).toISOString());

    if (auditError) {
      console.error('‚ùå L·ªói x√≥a audit logs:', auditError);
    } else {
      console.log(`‚úÖ ƒê√£ x√≥a ${deletedAudit?.length || 0} audit logs c≈©`);
    }

    console.log('‚úÖ Ho√†n th√†nh d·ªçn d·∫πp d·ªØ li·ªáu c≈©!');
    
  } catch (error) {
    console.error('‚ùå L·ªói d·ªçn d·∫πp:', error);
  }
}

// H√†m t·∫°o d·ªØ li·ªáu t·ªïng h·ª£p
async function createAggregatedData() {
  console.log('üìä T·∫°o d·ªØ li·ªáu t·ªïng h·ª£p...');
  
  try {
    // T·∫°o d·ªØ li·ªáu t·ªïng h·ª£p theo th√°ng cho Google Analytics
    const { data: gaData, error: gaError } = await supabase
      .rpc('aggregate_analytics_data', {
        platform_param: 'google',
        service_param: 'ga4',
        aggregation_type: 'monthly'
      });

    if (gaError) {
      console.error('‚ùå L·ªói t·∫°o d·ªØ li·ªáu t·ªïng h·ª£p GA:', gaError);
    } else {
      console.log('‚úÖ ƒê√£ t·∫°o d·ªØ li·ªáu t·ªïng h·ª£p Google Analytics');
    }

    // T·∫°o d·ªØ li·ªáu t·ªïng h·ª£p cho Google Ads
    const { data: adsData, error: adsError } = await supabase
      .rpc('aggregate_analytics_data', {
        platform_param: 'google',
        service_param: 'ads',
        aggregation_type: 'monthly'
      });

    if (adsError) {
      console.error('‚ùå L·ªói t·∫°o d·ªØ li·ªáu t·ªïng h·ª£p Ads:', adsError);
    } else {
      console.log('‚úÖ ƒê√£ t·∫°o d·ªØ li·ªáu t·ªïng h·ª£p Google Ads');
    }

  } catch (error) {
    console.error('‚ùå L·ªói t·∫°o d·ªØ li·ªáu t·ªïng h·ª£p:', error);
  }
}

// H√†m ki·ªÉm tra dung l∆∞·ª£ng database
async function checkDatabaseSize() {
  console.log('üìè Ki·ªÉm tra dung l∆∞·ª£ng database...');
  
  try {
    // ƒê·∫øm s·ªë b·∫£n ghi trong analytics_data
    const { count: analyticsCount, error: analyticsError } = await supabase
      .from('analytics_data')
      .select('*', { count: 'exact', head: true });

    if (analyticsError) {
      console.error('‚ùå L·ªói ƒë·∫øm analytics_data:', analyticsError);
    } else {
      console.log(`üìä S·ªë b·∫£n ghi analytics_data: ${analyticsCount}`);
    }

    // ƒê·∫øm s·ªë b·∫£n ghi trong audit_logs
    const { count: auditCount, error: auditError } = await supabase
      .from('audit_logs')
      .select('*', { count: 'exact', head: true });

    if (auditError) {
      console.error('‚ùå L·ªói ƒë·∫øm audit_logs:', auditError);
    } else {
      console.log(`üìä S·ªë b·∫£n ghi audit_logs: ${auditCount}`);
    }

    // ∆Ø·ªõc t√≠nh dung l∆∞·ª£ng (gi·∫£ ƒë·ªãnh m·ªói b·∫£n ghi ~1KB)
    const estimatedSizeMB = ((analyticsCount || 0) + (auditCount || 0)) / 1024;
    console.log(`üíæ Dung l∆∞·ª£ng ∆∞·ªõc t√≠nh: ${estimatedSizeMB.toFixed(2)} MB`);

  } catch (error) {
    console.error('‚ùå L·ªói ki·ªÉm tra dung l∆∞·ª£ng:', error);
  }
}

// H√†m t·ªëi ∆∞u h√≥a database
async function optimizeDatabase() {
  console.log('‚ö° T·ªëi ∆∞u h√≥a database...');
  
  try {
    // Vacuum database (n·∫øu c√≥ quy·ªÅn)
    const { error: vacuumError } = await supabase
      .rpc('vacuum_analytics_tables');

    if (vacuumError) {
      console.log('‚ö†Ô∏è  Kh√¥ng th·ªÉ vacuum database (c·∫ßn quy·ªÅn admin)');
    } else {
      console.log('‚úÖ ƒê√£ vacuum database');
    }

    // T·∫°o index cho c√°c c·ªôt th∆∞·ªùng query
    const { error: indexError } = await supabase
      .rpc('create_analytics_indexes');

    if (indexError) {
      console.log('‚ö†Ô∏è  Kh√¥ng th·ªÉ t·∫°o index (c·∫ßn quy·ªÅn admin)');
    } else {
      console.log('‚úÖ ƒê√£ t·∫°o index cho analytics tables');
    }

  } catch (error) {
    console.error('‚ùå L·ªói t·ªëi ∆∞u h√≥a:', error);
  }
}

// H√†m ch√≠nh
async function main() {
  console.log('üöÄ B·∫Øt ƒë·∫ßu qu·∫£n l√Ω retention policy...\n');
  
  await checkDatabaseSize();
  console.log('');
  
  await cleanupOldData();
  console.log('');
  
  await createAggregatedData();
  console.log('');
  
  await optimizeDatabase();
  console.log('');
  
  await checkDatabaseSize();
  
  console.log('\nüéâ Ho√†n th√†nh qu·∫£n l√Ω retention policy!');
  console.log('üí° Ch·∫°y script n√†y h√†ng tu·∫ßn ƒë·ªÉ duy tr√¨ hi·ªáu su·∫•t database');
}

// Ch·∫°y script
main().catch(console.error); 