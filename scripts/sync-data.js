const { createClient } = require('@supabase/supabase-js');
require('dotenv').config({ path: '.env' });

// L·∫•y th√¥ng tin t·ª´ .env
const supabaseUrl = process.env.VITE_SUPABASE_URL;
// D√πng service role key ƒë·ªÉ bypass RLS (l·∫•y trong Supabase Dashboard > Settings > API)
const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY || process.env.VITE_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå Thi·∫øu VITE_SUPABASE_URL ho·∫∑c SUPABASE_SERVICE_ROLE_KEY trong file .env');
  console.log('üí° L·∫•y Service Role Key t·∫°i: https://supabase.com/dashboard/project/avthknpemnrjpcuhbyjb/settings/api');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

async function syncGoogleAnalyticsData() {
  console.log('üîÑ B·∫Øt ƒë·∫ßu ƒë·ªìng b·ªô d·ªØ li·ªáu Google Analytics...');
  
  try {
    // D·ªØ li·ªáu m·∫´u - thay b·∫±ng d·ªØ li·ªáu th·∫≠t t·ª´ Google Analytics API
    const analyticsData = {
      sessions: Math.floor(Math.random() * 1000) + 500,
      users: Math.floor(Math.random() * 800) + 300,
      pageviews: Math.floor(Math.random() * 2500) + 1000,
      revenue: Math.floor(Math.random() * 10000) + 2000,
      bounceRate: Math.random() * 0.5 + 0.2,
      avgSessionDuration: Math.floor(Math.random() * 300) + 60
    };

    // L·∫•y organization_id ƒë·∫ßu ti√™n (ho·∫∑c thay b·∫±ng ID c·ª• th·ªÉ)
    const { data: orgs, error: orgError } = await supabase
      .from('organizations')
      .select('id')
      .limit(1);

    if (orgError) {
      console.error('‚ùå L·ªói l·∫•y organization:', orgError);
      return;
    }

    let organizationId;

    if (!orgs || orgs.length === 0) {
      console.log('‚ö†Ô∏è  Ch∆∞a c√≥ organization n√†o. T·∫°o organization m·ªõi...');
      
      const { data: newOrg, error: createError } = await supabase
        .from('organizations')
        .insert([{
          name: 'My Organization',
          domain: 'example.com',
          plan: 'free'
        }])
        .select()
        .single();

      if (createError) {
        console.error('‚ùå L·ªói t·∫°o organization:', createError);
        return;
      }
      
      console.log('‚úÖ ƒê√£ t·∫°o organization:', newOrg.id);
      organizationId = newOrg.id;

      // T·∫°o organization member cho user hi·ªán t·∫°i (n·∫øu c√≥)
      try {
        const { data: user } = await supabase.auth.getUser();
        if (user?.user) {
          await supabase
            .from('organization_members')
            .insert([{
              organization_id: organizationId,
              user_id: user.user.id,
              role: 'owner'
            }]);
          console.log('‚úÖ ƒê√£ t·∫°o organization member cho user:', user.user.id);
        }
      } catch (memberError) {
        console.log('‚ö†Ô∏è  Kh√¥ng th·ªÉ t·∫°o organization member (c√≥ th·ªÉ ch∆∞a ƒëƒÉng nh·∫≠p):', memberError.message);
      }
    } else {
      organizationId = orgs[0].id;
      console.log('‚úÖ S·ª≠ d·ª•ng organization hi·ªán c√≥:', organizationId);
    }

    // Insert v√†o b·∫£ng analytics_data
    const { data, error } = await supabase
      .from('analytics_data')
      .insert([{
        organization_id: organizationId,
        platform: 'google',
        service: 'ga4',
        metrics: analyticsData,
        dimensions: { 
          accountId: '123456789',
          propertyId: 'GA4_PROPERTY_ID'
        }
      }])
      .select();

    if (error) {
      console.error('‚ùå L·ªói insert analytics data:', error);
    } else {
      console.log('‚úÖ ƒê√£ insert analytics data th√†nh c√¥ng:', data[0].id);
    }

    // Log audit
    await supabase
      .from('audit_logs')
      .insert([{
        organization_id: organizationId,
        action: 'google_analytics_sync',
        resource: 'analytics_data',
        details: {
          processedCount: 1,
          errorCount: 0,
          timestamp: new Date().toISOString()
        }
      }]);

    console.log('‚úÖ ƒê·ªìng b·ªô Google Analytics ho√†n th√†nh!');

  } catch (error) {
    console.error('‚ùå L·ªói:', error);
  }
}

async function syncMetaAdsData() {
  console.log('üîÑ B·∫Øt ƒë·∫ßu ƒë·ªìng b·ªô d·ªØ li·ªáu Meta Ads...');
  
  try {
    // D·ªØ li·ªáu m·∫´u Meta Ads
    const metaData = {
      impressions: Math.floor(Math.random() * 50000) + 10000,
      clicks: Math.floor(Math.random() * 2000) + 500,
      spend: Math.floor(Math.random() * 5000) + 1000,
      conversions: Math.floor(Math.random() * 100) + 20,
      ctr: Math.random() * 0.1 + 0.01,
      cpc: Math.random() * 5 + 1
    };

    // L·∫•y organization_id
    const { data: orgs } = await supabase
      .from('organizations')
      .select('id')
      .limit(1);

    if (!orgs || orgs.length === 0) {
      console.log('‚ö†Ô∏è  Ch∆∞a c√≥ organization. B·ªè qua Meta Ads sync.');
      return;
    }

    const organizationId = orgs[0].id;

    // Insert Meta Ads data
    const { data, error } = await supabase
      .from('analytics_data')
      .insert([{
        organization_id: organizationId,
        platform: 'meta',
        service: 'ads',
        metrics: metaData,
        dimensions: { 
          accountId: 'META_ACCOUNT_ID',
          campaignId: 'CAMPAIGN_ID'
        }
      }])
      .select();

    if (error) {
      console.error('‚ùå L·ªói insert Meta Ads data:', error);
    } else {
      console.log('‚úÖ ƒê√£ insert Meta Ads data th√†nh c√¥ng:', data[0].id);
    }

    console.log('‚úÖ ƒê·ªìng b·ªô Meta Ads ho√†n th√†nh!');

  } catch (error) {
    console.error('‚ùå L·ªói:', error);
  }
}

async function syncTikTokAdsData() {
  console.log('üîÑ B·∫Øt ƒë·∫ßu ƒë·ªìng b·ªô d·ªØ li·ªáu TikTok Ads...');
  try {
    // D·ªØ li·ªáu m·∫´u TikTok Ads
    const tiktokData = {
      impressions: Math.floor(Math.random() * 30000) + 5000,
      clicks: Math.floor(Math.random() * 1000) + 200,
      spend: Math.floor(Math.random() * 3000) + 500,
      conversions: Math.floor(Math.random() * 50) + 10,
      ctr: Math.random() * 0.1 + 0.01,
      cpc: Math.random() * 4 + 1
    };

    // L·∫•y organization_id
    const { data: orgs } = await supabase
      .from('organizations')
      .select('id')
      .limit(1);

    if (!orgs || orgs.length === 0) {
      console.log('‚ö†Ô∏è  Ch∆∞a c√≥ organization. B·ªè qua TikTok Ads sync.');
      return;
    }

    const organizationId = orgs[0].id;

    // Insert TikTok Ads data
    const { data, error } = await supabase
      .from('analytics_data')
      .insert([{
        organization_id: organizationId,
        platform: 'tiktok',
        service: 'ads',
        metrics: tiktokData,
        dimensions: {
          accountId: 'TIKTOK_ACCOUNT_ID',
          campaignId: 'TIKTOK_CAMPAIGN_ID'
        }
      }])
      .select();

    if (error) {
      console.error('‚ùå L·ªói insert TikTok Ads data:', error);
    } else {
      console.log('‚úÖ ƒê√£ insert TikTok Ads data th√†nh c√¥ng:', data[0].id);
    }

    console.log('‚úÖ ƒê·ªìng b·ªô TikTok Ads ho√†n th√†nh!');
  } catch (error) {
    console.error('‚ùå L·ªói:', error);
  }
}

async function syncWooCommerceData() {
  console.log('üîÑ B·∫Øt ƒë·∫ßu ƒë·ªìng b·ªô d·ªØ li·ªáu WooCommerce...');
  try {
    // D·ªØ li·ªáu m·∫´u WooCommerce
    const wooData = {
      orders: Math.floor(Math.random() * 200) + 50,
      revenue: Math.floor(Math.random() * 20000) + 5000,
      customers: Math.floor(Math.random() * 100) + 20,
      avgOrderValue: Math.random() * 500 + 100
    };

    // L·∫•y organization_id
    const { data: orgs } = await supabase
      .from('organizations')
      .select('id')
      .limit(1);

    if (!orgs || orgs.length === 0) {
      console.log('‚ö†Ô∏è  Ch∆∞a c√≥ organization. B·ªè qua WooCommerce sync.');
      return;
    }

    const organizationId = orgs[0].id;

    // Insert WooCommerce data
    const { data, error } = await supabase
      .from('analytics_data')
      .insert([{
        organization_id: organizationId,
        platform: 'woocommerce',
        service: 'store',
        metrics: wooData,
        dimensions: {
          storeId: 'WOOCOMMERCE_STORE_ID'
        }
      }])
      .select();

    if (error) {
      console.error('‚ùå L·ªói insert WooCommerce data:', error);
    } else {
      console.log('‚úÖ ƒê√£ insert WooCommerce data th√†nh c√¥ng:', data[0].id);
    }

    console.log('‚úÖ ƒê·ªìng b·ªô WooCommerce ho√†n th√†nh!');
  } catch (error) {
    console.error('‚ùå L·ªói:', error);
  }
}

async function syncGoogleAdsData() {
  console.log('üîÑ B·∫Øt ƒë·∫ßu ƒë·ªìng b·ªô d·ªØ li·ªáu Google Ads...');
  
  try {
    // D·ªØ li·ªáu m·∫´u Google Ads
    const googleAdsData = {
      impressions: Math.floor(Math.random() * 100000) + 20000,
      clicks: Math.floor(Math.random() * 5000) + 1000,
      spend: Math.floor(Math.random() * 8000) + 2000,
      conversions: Math.floor(Math.random() * 200) + 50,
      ctr: Math.random() * 0.15 + 0.02,
      cpc: Math.random() * 3 + 0.5,
      conversionRate: Math.random() * 0.08 + 0.02,
      qualityScore: Math.floor(Math.random() * 10) + 1
    };

    // L·∫•y organization_id
    const { data: orgs } = await supabase
      .from('organizations')
      .select('id')
      .limit(1);

    if (!orgs || orgs.length === 0) {
      console.log('‚ö†Ô∏è  Ch∆∞a c√≥ organization. B·ªè qua Google Ads sync.');
      return;
    }

    const organizationId = orgs[0].id;

    // Insert Google Ads data
    const { data, error } = await supabase
      .from('analytics_data')
      .insert([{
        organization_id: organizationId,
        platform: 'google',
        service: 'ads',
        metrics: googleAdsData,
        dimensions: { 
          accountId: 'GOOGLE_ADS_ACCOUNT_ID',
          campaignId: 'GOOGLE_ADS_CAMPAIGN_ID'
        }
      }])
      .select();

    if (error) {
      console.error('‚ùå L·ªói insert Google Ads data:', error);
    } else {
      console.log('‚úÖ ƒê√£ insert Google Ads data th√†nh c√¥ng:', data[0].id);
    }

    console.log('‚úÖ ƒê·ªìng b·ªô Google Ads ho√†n th√†nh!');

  } catch (error) {
    console.error('‚ùå L·ªói:', error);
  }
}

async function syncGoogleSearchConsoleData() {
  console.log('üîÑ B·∫Øt ƒë·∫ßu ƒë·ªìng b·ªô d·ªØ li·ªáu Google Search Console...');
  
  try {
    // D·ªØ li·ªáu m·∫´u Google Search Console
    const searchConsoleData = {
      clicks: Math.floor(Math.random() * 5000) + 1000,
      impressions: Math.floor(Math.random() * 50000) + 10000,
      ctr: Math.random() * 0.1 + 0.01,
      avgPosition: Math.random() * 20 + 1,
      avgCpc: Math.random() * 2 + 0.1,
      totalCost: Math.floor(Math.random() * 3000) + 500
    };

    // L·∫•y organization_id
    const { data: orgs } = await supabase
      .from('organizations')
      .select('id')
      .limit(1);

    if (!orgs || orgs.length === 0) {
      console.log('‚ö†Ô∏è  Ch∆∞a c√≥ organization. B·ªè qua Google Search Console sync.');
      return;
    }

    const organizationId = orgs[0].id;

    // Insert Google Search Console data
    const { data, error } = await supabase
      .from('analytics_data')
      .insert([{
        organization_id: organizationId,
        platform: 'google',
        service: 'search-console',
        metrics: searchConsoleData,
        dimensions: { 
          siteUrl: 'https://example.com',
          searchType: 'web'
        }
      }])
      .select();

    if (error) {
      console.error('‚ùå L·ªói insert Google Search Console data:', error);
    } else {
      console.log('‚úÖ ƒê√£ insert Google Search Console data th√†nh c√¥ng:', data[0].id);
    }

    console.log('‚úÖ ƒê·ªìng b·ªô Google Search Console ho√†n th√†nh!');

  } catch (error) {
    console.error('‚ùå L·ªói:', error);
  }
}

async function syncGoogleMerchantCenterData() {
  console.log('üîÑ B·∫Øt ƒë·∫ßu ƒë·ªìng b·ªô d·ªØ li·ªáu Google Merchant Center...');
  
  try {
    // D·ªØ li·ªáu m·∫´u Google Merchant Center
    const merchantCenterData = {
      productViews: Math.floor(Math.random() * 10000) + 2000,
      productClicks: Math.floor(Math.random() * 2000) + 500,
      conversions: Math.floor(Math.random() * 100) + 20,
      revenue: Math.floor(Math.random() * 15000) + 3000,
      ctr: Math.random() * 0.2 + 0.05,
      conversionRate: Math.random() * 0.1 + 0.02,
      avgOrderValue: Math.random() * 200 + 50
    };

    // L·∫•y organization_id
    const { data: orgs } = await supabase
      .from('organizations')
      .select('id')
      .limit(1);

    if (!orgs || orgs.length === 0) {
      console.log('‚ö†Ô∏è  Ch∆∞a c√≥ organization. B·ªè qua Google Merchant Center sync.');
      return;
    }

    const organizationId = orgs[0].id;

    // Insert Google Merchant Center data
    const { data, error } = await supabase
      .from('analytics_data')
      .insert([{
        organization_id: organizationId,
        platform: 'google',
        service: 'merchant-center',
        metrics: merchantCenterData,
        dimensions: { 
          accountId: 'MERCHANT_CENTER_ACCOUNT_ID',
          feedId: 'PRODUCT_FEED_ID'
        }
      }])
      .select();

    if (error) {
      console.error('‚ùå L·ªói insert Google Merchant Center data:', error);
    } else {
      console.log('‚úÖ ƒê√£ insert Google Merchant Center data th√†nh c√¥ng:', data[0].id);
    }

    console.log('‚úÖ ƒê·ªìng b·ªô Google Merchant Center ho√†n th√†nh!');

  } catch (error) {
    console.error('‚ùå L·ªói:', error);
  }
}

async function syncGoogleSheetsData() {
  console.log('üîÑ B·∫Øt ƒë·∫ßu ƒë·ªìng b·ªô d·ªØ li·ªáu Google Sheets...');
  
  try {
    // D·ªØ li·ªáu m·∫´u Google Sheets (c√≥ th·ªÉ l√† d·ªØ li·ªáu t√πy ch·ªânh t·ª´ kh√°ch h√†ng)
    const sheetsData = {
      totalRows: Math.floor(Math.random() * 1000) + 100,
      totalColumns: Math.floor(Math.random() * 20) + 5,
      lastModified: new Date().toISOString(),
      sheetCount: Math.floor(Math.random() * 10) + 1,
      dataSize: Math.floor(Math.random() * 5000) + 1000 // KB
    };

    // L·∫•y organization_id
    const { data: orgs } = await supabase
      .from('organizations')
      .select('id')
      .limit(1);

    if (!orgs || orgs.length === 0) {
      console.log('‚ö†Ô∏è  Ch∆∞a c√≥ organization. B·ªè qua Google Sheets sync.');
      return;
    }

    const organizationId = orgs[0].id;

    // Insert Google Sheets data
    const { data, error } = await supabase
      .from('analytics_data')
      .insert([{
        organization_id: organizationId,
        platform: 'google',
        service: 'sheets',
        metrics: sheetsData,
        dimensions: { 
          fileId: 'GOOGLE_SHEETS_FILE_ID',
          fileName: 'Customer Data Sheet'
        }
      }])
      .select();

    if (error) {
      console.error('‚ùå L·ªói insert Google Sheets data:', error);
    } else {
      console.log('‚úÖ ƒê√£ insert Google Sheets data th√†nh c√¥ng:', data[0].id);
    }

    console.log('‚úÖ ƒê·ªìng b·ªô Google Sheets ho√†n th√†nh!');

  } catch (error) {
    console.error('‚ùå L·ªói:', error);
  }
}

async function main() {
  console.log('üöÄ B·∫Øt ƒë·∫ßu ƒë·ªìng b·ªô d·ªØ li·ªáu...\n');
  
  // Google Services
  await syncGoogleAnalyticsData();
  console.log('');
  await syncGoogleAdsData();
  console.log('');
  await syncGoogleSearchConsoleData();
  console.log('');
  await syncGoogleMerchantCenterData();
  console.log('');
  await syncGoogleSheetsData();
  console.log('');
  
  // Other Platforms
  await syncMetaAdsData();
  console.log('');
  await syncTikTokAdsData();
  console.log('');
  await syncWooCommerceData();
  
  console.log('\nüéâ Ho√†n th√†nh ƒë·ªìng b·ªô d·ªØ li·ªáu!');
  console.log('üìä Ki·ªÉm tra d·ªØ li·ªáu t·∫°i: https://supabase.com/dashboard/project/avthknpemnrjpcuhbyjb/editor');
}

// Ch·∫°y script
main().catch(console.error); 